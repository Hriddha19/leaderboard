// api/[...params].js
export const config = {
  runtime: 'edge'
};

export default async function handler(req) {
  try {
    const url = new URL(req.url);
    const pathSegments = url.pathname.split('/').filter(Boolean);
    
    // Remove 'api' from path segments
    const params = pathSegments.slice(1);
    
    if (!params || params.length < 2) {
      return new Response(JSON.stringify({ error: 'Invalid URL format' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    // Extract leaderboard type and data
    const leaderboardType = params[0];
    const dataString = params[1].replace('.png', '');
    
    // Parse the data string (e.g., "Hriddha+10+Prasun+8+Krishna+6")
    const dataArray = dataString.split('+');
    const leaderboard = [];
    
    for (let i = 0; i < dataArray.length; i += 2) {
      if (i + 1 < dataArray.length) {
        leaderboard.push({
          name: dataArray[i],
          score: parseInt(dataArray[i + 1])
        });
      }
    }

    // Sort by score (descending)
    leaderboard.sort((a, b) => b.score - a.score);

    // Generate SVG instead of Canvas (more reliable in serverless)
    const width = 600;
    const height = 100 + (leaderboard.length * 60) + 80;
    
    const svg = `
      <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
        <defs>
          <linearGradient id="bgGradient" x1="0%" y1="0%" x2="0%" y2="100%">
            <stop offset="0%" style="stop-color:#667eea;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#764ba2;stop-opacity:1" />
          </linearGradient>
        </defs>
        
        <!-- Background -->
        <rect width="${width}" height="${height}" fill="url(#bgGradient)"/>
        
        <!-- Header -->
        <text x="${width/2}" y="50" font-family="Arial, sans-serif" font-size="32" font-weight="bold" fill="white" text-anchor="middle">
          ${leaderboardType.toUpperCase()} LEADERBOARD
        </text>
        
        ${leaderboard.map((entry, index) => {
          const y = 120 + (index * 60);
          const position = index + 1;
          let badgeColor = '#FFD700'; // Gold
          if (position === 2) badgeColor = '#C0C0C0'; // Silver
          if (position === 3) badgeColor = '#CD7F32'; // Bronze
          if (position > 3) badgeColor = '#4A5568'; // Gray
          
          return `
            <!-- Position badge -->
            <circle cx="50" cy="${y}" r="20" fill="${badgeColor}"/>
            <text x="50" y="${y + 5}" font-family="Arial, sans-serif" font-size="16" font-weight="bold" fill="black" text-anchor="middle">
              ${position}
            </text>
            
            <!-- Name -->
            <text x="90" y="${y + 8}" font-family="Arial, sans-serif" font-size="24" font-weight="bold" fill="white">
              ${entry.name}
            </text>
            
            <!-- Score -->
            <text x="${width - 40}" y="${y + 8}" font-family="Arial, sans-serif" font-size="28" font-weight="bold" fill="#FFE135" text-anchor="end">
              ${entry.score}
            </text>
            
            ${index < leaderboard.length - 1 ? `
              <!-- Separator line -->
              <line x1="40" y1="${y + 30}" x2="${width - 40}" y2="${y + 30}" stroke="rgba(255,255,255,0.2)" stroke-width="1"/>
            ` : ''}
          `;
        }).join('')}
        
        <!-- Footer -->
        <text x="${width/2}" y="${height - 20}" font-family="Arial, sans-serif" font-size="14" fill="rgba(255,255,255,0.5)" text-anchor="middle">
          Generated by Discord Bot
        </text>
      </svg>
    `;

    // Convert SVG to PNG using built-in APIs
    const canvas = new OffscreenCanvas(width, height);
    const ctx = canvas.getContext('2d');
    
    // Create image from SVG
    const img = new Image();
    const svgBlob = new Blob([svg], { type: 'image/svg+xml' });
    const url_obj = URL.createObjectURL(svgBlob);
    
    return new Promise((resolve) => {
      img.onload = () => {
        ctx.drawImage(img, 0, 0);
        canvas.convertToBlob({ type: 'image/png' }).then(blob => {
          resolve(new Response(blob, {
            headers: {
              'Content-Type': 'image/png',
              'Cache-Control': 'public, max-age=3600'
            }
          }));
        });
      };
      img.src = url_obj;
    });

  } catch (error) {
    console.error('Error generating image:', error);
    return new Response(JSON.stringify({ error: 'Failed to generate image', details: error.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}
    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, 0, height);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(1, '#764ba2');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);

    // Header
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 32px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(`${leaderboardType.toUpperCase()} LEADERBOARD`, width / 2, 50);

    // Leaderboard entries
    ctx.textAlign = 'left';
    leaderboard.forEach((entry, index) => {
      const y = 120 + (index * 60);
      
      // Position badge
      const position = index + 1;
      let badgeColor = '#FFD700'; // Gold
      if (position === 2) badgeColor = '#C0C0C0'; // Silver
      if (position === 3) badgeColor = '#CD7F32'; // Bronze
      if (position > 3) badgeColor = '#4A5568'; // Gray

      // Draw position badge
      ctx.fillStyle = badgeColor;
      ctx.beginPath();
      ctx.arc(50, y, 20, 0, 2 * Math.PI);
      ctx.fill();

      // Position number
      ctx.fillStyle = '#000000';
      ctx.font = 'bold 16px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(position.toString(), 50, y + 5);

      // Name
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 24px Arial';
      ctx.textAlign = 'left';
      ctx.fillText(entry.name, 90, y + 8);

      // Score
      ctx.fillStyle = '#FFE135';
      ctx.font = 'bold 28px Arial';
      ctx.textAlign = 'right';
      ctx.fillText(entry.score.toString(), width - 40, y + 8);

      // Separator line
      if (index < leaderboard.length - 1) {
        ctx.strokeStyle = '#ffffff30';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(40, y + 30);
        ctx.lineTo(width - 40, y + 30);
        ctx.stroke();
      }
    });

    // Footer
    ctx.fillStyle = '#ffffff80';
    ctx.font = '14px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Generated by Discord Bot', width / 2, height - 20);

    // Set response headers
    res.setHeader('Content-Type', 'image/png');
    res.setHeader('Cache-Control', 'public, max-age=3600'); // Cache for 1 hour
    
    // Send the image
    const buffer = canvas.toBuffer('image/png');
    res.send(buffer);

  } catch (error) {
    console.error('Error generating image:', error);
    res.status(500).json({ error: 'Failed to generate image', details: error.message });
  }
}
    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, 0, height);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(1, '#764ba2');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);

    // Header
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 32px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(`${leaderboardType.toUpperCase()} LEADERBOARD`, width / 2, 50);

    // Leaderboard entries
    ctx.textAlign = 'left';
    leaderboard.forEach((entry, index) => {
      const y = 120 + (index * 60);
      
      // Position badge
      const position = index + 1;
      let badgeColor = '#FFD700'; // Gold
      if (position === 2) badgeColor = '#C0C0C0'; // Silver
      if (position === 3) badgeColor = '#CD7F32'; // Bronze
      if (position > 3) badgeColor = '#4A5568'; // Gray

      // Draw position badge
      ctx.fillStyle = badgeColor;
      ctx.beginPath();
      ctx.arc(50, y, 20, 0, 2 * Math.PI);
      ctx.fill();

      // Position number
      ctx.fillStyle = '#000000';
      ctx.font = 'bold 16px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(position.toString(), 50, y + 5);

      // Name
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 24px Arial';
      ctx.textAlign = 'left';
      ctx.fillText(entry.name, 90, y + 8);

      // Score
      ctx.fillStyle = '#FFE135';
      ctx.font = 'bold 28px Arial';
      ctx.textAlign = 'right';
      ctx.fillText(entry.score.toString(), width - 40, y + 8);

      // Separator line
      if (index < leaderboard.length - 1) {
        ctx.strokeStyle = '#ffffff30';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(40, y + 30);
        ctx.lineTo(width - 40, y + 30);
        ctx.stroke();
      }
    });

    // Footer
    ctx.fillStyle = '#ffffff80';
    ctx.font = '14px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Generated by Discord Bot', width / 2, height - 20);

    // Set response headers
    res.setHeader('Content-Type', 'image/png');
    res.setHeader('Cache-Control', 'public, max-age=3600'); // Cache for 1 hour
    
    // Send the image
    const buffer = canvas.toBuffer('image/png');
    res.send(buffer);

  } catch (error) {
    console.error('Error generating image:', error);
    res.status(500).json({ error: 'Failed to generate image' });
  }
}
    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, 0, height);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(1, '#764ba2');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);

    // Header
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 32px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(`${leaderboardType.toUpperCase()} LEADERBOARD`, width / 2, 50);

    // Leaderboard entries
    ctx.textAlign = 'left';
    leaderboard.forEach((entry, index) => {
      const y = 120 + (index * 60);
      
      // Position badge
      const position = index + 1;
      let badgeColor = '#FFD700'; // Gold
      if (position === 2) badgeColor = '#C0C0C0'; // Silver
      if (position === 3) badgeColor = '#CD7F32'; // Bronze
      if (position > 3) badgeColor = '#4A5568'; // Gray

      // Draw position badge
      ctx.fillStyle = badgeColor;
      ctx.beginPath();
      ctx.arc(50, y, 20, 0, 2 * Math.PI);
      ctx.fill();

      // Position number
      ctx.fillStyle = '#000000';
      ctx.font = 'bold 16px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(position.toString(), 50, y + 5);

      // Name
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 24px Arial';
      ctx.textAlign = 'left';
      ctx.fillText(entry.name, 90, y + 8);

      // Score
      ctx.fillStyle = '#FFE135';
      ctx.font = 'bold 28px Arial';
      ctx.textAlign = 'right';
      ctx.fillText(entry.score.toString(), width - 40, y + 8);

      // Separator line
      if (index < leaderboard.length - 1) {
        ctx.strokeStyle = '#ffffff30';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(40, y + 30);
        ctx.lineTo(width - 40, y + 30);
        ctx.stroke();
      }
    });

    // Footer
    ctx.fillStyle = '#ffffff80';
    ctx.font = '14px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Generated by Discord Bot', width / 2, height - 20);

    // Set response headers
    res.setHeader('Content-Type', 'image/png');
    res.setHeader('Cache-Control', 'public, max-age=3600'); // Cache for 1 hour
    
    // Send the image
    const buffer = canvas.toBuffer('image/png');
    res.send(buffer);

  } catch (error) {
    console.error('Error generating image:', error);
    res.status(500).json({ error: 'Failed to generate image' });
  }
}
