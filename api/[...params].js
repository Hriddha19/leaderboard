// api/[...params].js
import { createCanvas } from 'canvas';

export default async function handler(req, res) {
  try {
    const { params } = req.query;
    
    if (!params || params.length < 2) {
      return res.status(400).json({ error: 'Invalid URL format' });
    }

    // Extract leaderboard type and data
    const leaderboardType = params[0];
    const dataString = params[1].replace('.png', '');
    
    // Parse the data string (e.g., "Hriddha+10+Prasun+8+Krisha+7")
    const dataArray = dataString.split('+');
    const leaderboard = [];
    
    for (let i = 0; i < dataArray.length; i += 2) {
      if (i + 1 < dataArray.length) {
        leaderboard.push({
          name: dataArray[i],
          score: parseInt(dataArray[i + 1])
        });
      }
    }

    // Sort by score (descending)
    leaderboard.sort((a, b) => b.score - a.score);

    // Create canvas
    const width = 600;
    const height = 100 + (leaderboard.length * 60) + 80; // Dynamic height
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, 0, height);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(1, '#764ba2');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);

    // Header
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 32px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(`${leaderboardType.toUpperCase()} LEADERBOARD`, width / 2, 50);

    // Leaderboard entries
    ctx.textAlign = 'left';
    leaderboard.forEach((entry, index) => {
      const y = 120 + (index * 60);
      
      // Position badge
      const position = index + 1;
      let badgeColor = '#FFD700'; // Gold
      if (position === 2) badgeColor = '#C0C0C0'; // Silver
      if (position === 3) badgeColor = '#CD7F32'; // Bronze
      if (position > 3) badgeColor = '#4A5568'; // Gray

      // Draw position badge
      ctx.fillStyle = badgeColor;
      ctx.beginPath();
      ctx.arc(50, y, 20, 0, 2 * Math.PI);
      ctx.fill();

      // Position number
      ctx.fillStyle = '#000000';
      ctx.font = 'bold 16px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(position.toString(), 50, y + 5);

      // Name
      ctx.fillStyle = '#ffffff';
      ctx.font = 'bold 24px Arial';
      ctx.textAlign = 'left';
      ctx.fillText(entry.name, 90, y + 8);

      // Score
      ctx.fillStyle = '#FFE135';
      ctx.font = 'bold 28px Arial';
      ctx.textAlign = 'right';
      ctx.fillText(entry.score.toString(), width - 40, y + 8);

      // Separator line
      if (index < leaderboard.length - 1) {
        ctx.strokeStyle = '#ffffff30';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(40, y + 30);
        ctx.lineTo(width - 40, y + 30);
        ctx.stroke();
      }
    });

    // Footer
    ctx.fillStyle = '#ffffff80';
    ctx.font = '14px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Generated by Discord Bot', width / 2, height - 20);

    // Set response headers
    res.setHeader('Content-Type', 'image/png');
    res.setHeader('Cache-Control', 'public, max-age=3600'); // Cache for 1 hour
    
    // Send the image
    const buffer = canvas.toBuffer('image/png');
    res.send(buffer);

  } catch (error) {
    console.error('Error generating image:', error);
    res.status(500).json({ error: 'Failed to generate image' });
  }
}
