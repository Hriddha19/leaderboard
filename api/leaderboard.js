// api/leaderboard.js
import puppeteer from 'puppeteer-core';
import chromium from '@sparticuz/chromium';

export default async function handler(req, res) {
  try {
    const { type = 'goals', data = 'Player1+10+Player2+5' } = req.query;
    
    // Parse data
    const decodedData = decodeURIComponent(data);
    const parts = decodedData.split('+');
    const players = [];
    
    for (let i = 0; i < parts.length; i += 2) {
      if (i + 1 < parts.length) {
        const name = parts[i].trim();
        const score = parseInt(parts[i + 1]) || 0;
        if (name) {
          players.push({ name, score });
        }
      }
    }
    
    // Sort players by score (highest first)
    players.sort((a, b) => b.score - a.score);
    
    // If no players, add default ones
    if (players.length === 0) {
      players.push(
        { name: 'Player1', score: 10 },
        { name: 'Player2', score: 5 }
      );
    }
    
    const width = 600;
    const height = 150 + players.length * 60;
    
    // Create HTML content
    const html = `
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            body {
                margin: 0;
                padding: 0;
                width: ${width}px;
                height: ${height}px;
                background: linear-gradient(to bottom, #667eea, #764ba2);
                font-family: Arial, sans-serif;
                color: white;
                overflow: hidden;
            }
            .container {
                width: 100%;
                height: 100%;
                position: relative;
            }
            .title {
                text-align: center;
                font-size: 32px;
                font-weight: bold;
                padding-top: 30px;
                margin-bottom: 20px;
            }
            .player {
                display: flex;
                align-items: center;
                margin: 30px 40px;
                position: relative;
            }
            .position {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                font-weight: bold;
                font-size: 16px;
                color: black;
                margin-right: 30px;
            }
            .gold { background-color: #FFD700; }
            .silver { background-color: #C0C0C0; }
            .bronze { background-color: #CD7F32; }
            .other { background-color: #4A5568; }
            .name {
                flex: 1;
                font-size: 24px;
                font-weight: bold;
            }
            .score {
                font-size: 28px;
                font-weight: bold;
                color: #FFE135;
            }
            .separator {
                height: 1px;
                background: rgba(255,255,255,0.2);
                margin: 0 40px;
            }
            .footer {
                position: absolute;
                bottom: 20px;
                width: 100%;
                text-align: center;
                font-size: 14px;
                color: rgba(255,255,255,0.5);
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="title">${type.toUpperCase()} LEADERBOARD</div>
            ${players.map((player, index) => {
              const position = index + 1;
              let positionClass = 'other';
              if (position === 1) positionClass = 'gold';
              else if (position === 2) positionClass = 'silver';
              else if (position === 3) positionClass = 'bronze';
              
              return `
                <div class="player">
                    <div class="position ${positionClass}">${position}</div>
                    <div class="name">${player.name}</div>
                    <div class="score">${player.score}</div>
                </div>
                ${index < players.length - 1 ? '<div class="separator"></div>' : ''}
              `;
            }).join('')}
            <div class="footer">Generated by Discord Bot</div>
        </div>
    </body>
    </html>
    `;
    
    // Launch browser and capture screenshot
    const browser = await puppeteer.launch({
      args: chromium.args,
      defaultViewport: chromium.defaultViewport,
      executablePath: await chromium.executablePath(),
      headless: chromium.headless,
    });
    
    const page = await browser.newPage();
    await page.setViewport({ width, height });
    await page.setContent(html);
    
    const screenshot = await page.screenshot({
      type: 'png',
      width,
      height,
    });
    
    await browser.close();
    
    res.setHeader('Content-Type', 'image/png');
    res.setHeader('Cache-Control', 'public, max-age=3600');
    res.status(200).send(screenshot);
    
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ error: error.message });
  }
}      players.push(
        { name: 'Player1', score: 10 },
        { name: 'Player2', score: 5 }
      );
    }
    
    // Canvas dimensions
    const width = 600;
    const height = 150 + players.length * 60;
    
    // Create canvas
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');
    
    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, 0, height);
    gradient.addColorStop(0, '#667eea');
    gradient.addColorStop(1, '#764ba2');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);
    
    // Title
    ctx.fillStyle = 'white';
    ctx.font = 'bold 32px Arial';
    ctx.textAlign = 'center';
    ctx.fillText(type.toUpperCase() + ' LEADERBOARD', width/2, 50);
    
    // Players
    players.forEach((player, index) => {
      const y = 120 + index * 60;
      const position = index + 1;
      let badgeColor = '#FFD700'; // Gold
      if (position === 2) badgeColor = '#C0C0C0'; // Silver  
      if (position === 3) badgeColor = '#CD7F32'; // Bronze
      if (position > 3) badgeColor = '#4A5568'; // Gray
      
      // Position badge (circle)
      ctx.beginPath();
      ctx.arc(50, y, 20, 0, 2 * Math.PI);
      ctx.fillStyle = badgeColor;
      ctx.fill();
      
      // Position number
      ctx.fillStyle = 'black';
      ctx.font = 'bold 16px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(position.toString(), 50, y + 5);
      
      // Player name
      ctx.fillStyle = 'white';
      ctx.font = 'bold 24px Arial';
      ctx.textAlign = 'left';
      ctx.fillText(player.name, 90, y + 8);
      
      // Score
      ctx.fillStyle = '#FFE135';
      ctx.font = 'bold 28px Arial';
      ctx.textAlign = 'right';
      ctx.fillText(player.score.toString(), width - 40, y + 8);
      
      // Separator line
      if (index < players.length - 1) {
        ctx.strokeStyle = 'rgba(255,255,255,0.2)';
        ctx.lineWidth = 1;
        ctx.beginPath();
        ctx.moveTo(40, y + 30);
        ctx.lineTo(width - 40, y + 30);
        ctx.stroke();
      }
    });
    
    // Footer
    ctx.fillStyle = 'rgba(255,255,255,0.5)';
    ctx.font = '14px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('Generated by Discord Bot', width/2, height - 20);
    
    // Convert to PNG buffer
    const buffer = canvas.toBuffer('image/png');
    
    // Set headers
    res.setHeader('Content-Type', 'image/png');
    res.setHeader('Cache-Control', 'public, max-age=3600');
    res.status(200).send(buffer);
    
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}
